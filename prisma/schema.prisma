// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Vercel Postgres connection string
}

model User {
  id        String    @id @default(cuid())
  clerkId   String    @unique @default("default-clerk-id")
  name      String?
  email     String    @unique
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  following Follow[]  @relation("following")
  followers Follow[]  @relation("followers")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id        String    @id @default(uuid())
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  content   String
  comments  Comment[]
  likes     Like[]
  image     Image?    @relation(fields: [imageId], references: [id])
  imageId   String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id              String    @id @default(uuid())
  authorId        String
  author          User      @relation(fields: [authorId], references: [id])
  postId          String
  post            Post      @relation(fields: [postId], references: [id])
  content         String
  likes           Like[]
  comments        Comment[] @relation("CommentToComment")
  parentCommentId String?
  parentComment   Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id])
  image           Image?    @relation(fields: [imageId], references: [id])
  imageId         String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  url       String // URL to the image in Vercel Blob
  post      Post?
  comment   Comment?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  followerId  String
  follower    User   @relation("following", fields: [followerId], references: [id])
  followingId String @default("default-following-id")
  following   User   @relation("followers", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, commentId])
}
